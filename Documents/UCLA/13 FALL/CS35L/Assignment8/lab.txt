//port number 12125

$ wget http://www.cs.ucla.edu/classes/fall13/cs35L/assign/sthttpd-2.26.4.tar.gz
$ tar xvf sthttpd-2.26.4.tar.gz $ cd sthttpd-2.26.4

//copy the patch source into the file patch
$ patch -p1 <patch

//configure and make the file without stack protector so that we can send the
//exploit code to it later
$ CC=gcc CFLAGS='-fno-stack-protector' ./configure $ CC=gcc
CFLAGS='-fno-stack-protector' make $ cd src

//execute the command
$ ./thttpd -p 12125

//send signal
$ wget http://lnxsrv02.seas.ucla.edu:12125
//everything is working

//after trying it without thousands of A's, we found that 404 and 500 errors are
//the interntal errors which doesn't count as crashing. The server crashes when
//we repeately killed the program and sent the same code to clear the buffer and
//the block.

$ wget http://lnxsrv02.seas.ucla.edu:12125/A....A Connecting to
lnxsrv02.seas.ucla.edu|164.67.100.232|:12125... failed: Connection refused.
Resolving lnxsrv02.seas.ucla.edu... 164.67.100.232 Connecting to
lnxsrv02.seas.ucla.edu|164.67.100.232|:12125... failed: Connection refused.

//crash the program with 3125 A's. 

//find the pid
$ top -u yehh //14582

$ ./thttpd -p 12125

//run the crashing request on the other terminal with pid 14582. this terminal
//must also be on the same server continue till it crashes, then backtrace
$ gdb 
$ attach 12125

#0  0x000000356f679d9d in _int_malloc () from /lib64/libc.so.6 #1
0x000000356f67a5e6 in calloc () from /lib64/libc.so.6 #2  0x000000356f66f1ed in
open_memstream () from /lib64/libc.so.6 #3  0x000000356f6e4bdb in __vsyslog_chk
() from /lib64/libc.so.6 #4  0x000000356f67074e in __libc_message () from
/lib64/libc.so.6 #5  0x000000356f676126 in malloc_printerr () from
/lib64/libc.so.6 #6  0x000000356f67bb27 in _int_realloc () from /lib64/libc.so.6
#7  0x000000356f67bce5 in realloc () from /lib64/libc.so.6 #8 0x0000000000408855
in httpd_realloc_str () #9  0x00000000004055f6 in handle_read () #10
0x00000000004037ba in main ()

//we found that the problem occurs in the patch file where the function is
//allocating memory that causes segmentation fault.

5. in order to exploit the code, we need to overflow the heap. since heap is
dynaically allocating the memeory, it is harder than stack to exploit because we
would need to write longer exploit code to override the address, the size, the
presize and the pointer to the next heap. therefore, by overwriting the return
address of the heap, we'll be able to jump to another code that we wrote
ourselves.

6. 
//the -c and -S option tells gcc where to stop. -c compile the source file but
//doesn't link. -S on the other hand doesn't assemble the file after
//compilation.

$ gcc -m32 -c -S -o thttpd-nostackprot.s -fno-stack-protector -I . -I ../
thttpd.c $ gcc -m32 -c -S -o thttpd-stackprot.s -fstack-protector -I . -I ../
thttpd.c $ diff thttpd-nostackprot.s thttpd-stackprot.s >difference

//look inside the difference file, we see that for the file with stack
//protection, there are more command compare to the one without stack
//protection. therefore, the stack-protector is less effecient. 

// the shell script command to check for call is shown below

diff thttpd-nostackprot.s thttpd-stackprot.s >difference grep 'call' difference
> call

//here's inside the call file
>       call    __stack_chk_fail call    __stack_chk_fail call __stack_chk_fail
>       call    __stack_chk_fail
//we see that all the functions are called from the source file with protection

7.  $ valgrind ./thttpd -p 12125

==5176== Memcheck, a memory error detector ==5176== Copyright (C) 2002-2012, and
GNU GPL'd, by Julian Seward et al.  ==5176== Using Valgrind-3.8.1 and LibVEX;
rerun with -h for copyright info ==5176== Command: ./thttpd -p 12125 ==5176==
==5176== ==5176== HEAP SUMMARY: ==5176==     in use at exit: 0 bytes in 0 blocks
==5176==   total heap usage: 12 allocs, 12 frees, 3,318 bytes allocated ==5176==
==5176== All heap blocks were freed -- no leaks are possible ==5176== ==5176==
For counts of detected and suppressed errors, rerun with: -v ==5176== ERROR
SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)

//it listed out the when the memory is allocated on the heap and how many bytes
//are allocated. valgrind also reports any error in the memory allocation. in
//this case, there is no error.

8. Build the program with Sanitize $ make CC="gcc -m32"
CFLAGS="-fsanitize=address -fstack-protector" LDFLAGS="-Xlinker
--rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"
//it didn't work for me at first because my path is located in a different
//directory
$ export PATH=/usr/local/cs/bin:$PATH $ ./thttpd -p 12125
//check for pid again
$ top -u yehh //5574

//run gdb on the same server but different terminal
$ gdb $ attach 5574

//send the crash request to the first terminal continue on the gdb till crash
//backtrace
Program received signal SIGSEGV, Segmentation fault.  0x000000327e679d9d in
_int_malloc () from /lib64/libc.so.6 (gdb) bt #0  0x000000327e679d9d in
_int_malloc () from /lib64/libc.so.6 #1  0x000000327e67a5e6 in calloc () from
/lib64/libc.so.6 #2  0x000000327e66f1ed in open_memstream () from
/lib64/libc.so.6 #3  0x000000327e6e4bdb in __vsyslog_chk () from
/lib64/libc.so.6 #4  0x000000327e67074e in __libc_message () from
/lib64/libc.so.6 #5  0x000000327e676126 in malloc_printerr () from
/lib64/libc.so.6 #6  0x000000327e67bb27 in _int_realloc () from /lib64/libc.so.6
#7  0x000000327e67bce5 in realloc () from /lib64/libc.so.6 #8 0x0000000000408855
in httpd_realloc_str () #9  0x00000000004055f6 in handle_read () #10
0x00000000004037ba in main ()

9.  $ gcc -m32 -c -S -o thttpd-sanitize.s -fsanitize=address -fstack-protector
-I .  -I ../ thttpd.c $ diff thttpd-sanitize.s thttpd-stackprot.s >question9
//examine the file, we see that there are more actions done by the first file,
//which is the sanitize one. therefore, the sanitize source file is less
//effecient than the stack protected source file.

